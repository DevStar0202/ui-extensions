export interface Blacklist {
  [key: string]: boolean | Function;
}

export const builtIns: Blacklist = {
  // Browser
  OffscreenCanvasRenderingContext2D: true,
  PushSubscriptionOptions: true,
  PushSubscription: true,
  PushManager: true,
  PermissionStatus: true,
  Permissions: true,
  PeriodicSyncManager: true,
  PaymentInstruments: true,
  Notification: true,
  BackgroundFetchRegistration: true,
  BackgroundFetchRecord: true,
  BackgroundFetchManager: true,
  UserActivation: true,
  OffscreenCanvas: true,
  WebSocket: true,
  WebGLVertexArrayObject: true,
  WebGLUniformLocation: true,
  WebGLTransformFeedback: true,
  WebGLTexture: true,
  WebGLSync: true,
  WebGLShaderPrecisionFormat: true,
  WebGLShader: true,
  WebGLSampler: true,
  WebGLRenderingContext: true,
  WebGLRenderbuffer: true,
  WebGLQuery: true,
  WebGLProgram: true,
  WebGLFramebuffer: true,
  WebGLBuffer: true,
  WebGLActiveInfo: true,
  WebGL2RenderingContext: true,
  TextEncoderStream: true,
  TextEncoder: true,
  TextDecoderStream: true,
  TextDecoder: true,
  SyncManager: true,
  Path2D: true,
  NetworkInformation: true,
  MediaCapabilities: true,
  ImageBitmapRenderingContext: true,
  IDBVersionChangeEvent: true,
  IDBTransaction: true,
  IDBRequest: true,
  IDBOpenDBRequest: true,
  IDBObjectStore: true,
  IDBKeyRange: true,
  IDBIndex: true,
  IDBFactory: true,
  IDBDatabase: true,
  IDBCursorWithValue: true,
  IDBCursor: true,
  EventSource: true,
  DecompressionStream: true,
  Crypto: true,
  CompressionStream: true,
  CanvasPattern: true,
  CanvasGradient: true,
  BroadcastChannel: true,
  WritableStreamDefaultWriter: true,
  WritableStream: true,
  WorkerNavigator: true,
  WorkerLocation: true,
  WorkerGlobalScope: true,
  Worker: true,
  TransformStream: true,
  TextMetrics: true,
  SecurityPolicyViolationEvent: true,
  ReadableStreamDefaultReader: true,
  ReadableStream: true,
  PerformanceServerTiming: true,
  PerformanceResourceTiming: true,
  PerformanceObserverEntryList: true,
  PerformanceObserver: true,
  PerformanceMeasure: true,
  PerformanceMark: true,
  PerformanceEntry: true,
  Performance: true,
  FileReaderSync: true,
  FileReader: true,
  FileList: true,
  File: true,
  DOMStringList: true,
  DOMRectReadOnly: true,
  DOMRect: true,
  DOMQuad: true,
  DOMPointReadOnly: true,
  DOMPoint: true,
  DOMMatrixReadOnly: true,
  DOMMatrix: true,
  DOMException: true,
  CSSSkewY: true,
  CSSSkewX: true,
  ByteLengthQueuingStrategy: true,
  Blob: true,
  AbortSignal: true,
  AbortController: true,
  close: true,
  webkitRequestFileSystem: true,
  webkitRequestFileSystemSync: true,
  webkitResolveLocalFileSystemURL: true,
  webkitResolveLocalFileSystemSyncURL: true,
  WebAssembly: true,
  TrustedTypePolicyFactory: true,
  Cache: true,
  CacheStorage: true,
  CryptoKey: true,
  Lock: true,
  LockManager: true,
  NavigationPreloadManager: true,
  ServiceWorkerRegistration: true,
  StorageManager: true,
  SubtleCrypto: true,
  BarcodeDetector: true,
  USB: true,
  USBAlternateInterface: true,
  USBConfiguration: true,
  USBConnectionEvent: true,
  USBDevice: true,
  USBEndpoint: true,
  USBInterface: true,
  USBInTransferResult: true,
  USBIsochronousInTransferPacket: true,
  USBIsochronousInTransferResult: true,
  USBIsochronousOutTransferPacket: true,
  USBIsochronousOutTransferResult: true,
  USBOutTransferResult: true,
  // Network
  XMLHttpRequestUpload: true,
  XMLHttpRequestEventTarget: true,
  XMLHttpRequest: true,
  // Other
  Function: () => () => {
    // noop
  },
  eval: true,
  importScripts: true,
};

function clobber(object: Object, blacklist: Blacklist) {
  let target = object;
  do {
    Object.getOwnPropertyNames(target)
      .filter(key => blacklist[key])
      .forEach(key => {
        try {
          Object.defineProperty(target, key, {
            value: blacklist[key] === true ? undefined : blacklist[key],
            configurable: false,
            enumerable: false,
            writable: false,
          });
        } catch (_) {}
      });
    target = Object.getPrototypeOf(target);
  } while (target !== Object.prototype);
}

export const apply = (workerGlobalScope: Object, blacklist: Blacklist = builtIns) => {
  clobber(workerGlobalScope, blacklist);
};
